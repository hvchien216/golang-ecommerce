// Code generated by mockery v2.20.0. DO NOT EDIT.

package categorystorage

import (
	common "github.com/hvchien216/golang-ecommerce/common"
	categorymodel "github.com/hvchien216/golang-ecommerce/internal/modules/category/categorymodel"

	context "context"

	mock "github.com/stretchr/testify/mock"

	orm "github.com/hvchien216/golang-ecommerce/internal/orm"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockStore) Create(_a0 context.Context, _a1 categorymodel.NewCategoryInput) (*orm.Category, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orm.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, categorymodel.NewCategoryInput) (*orm.Category, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, categorymodel.NewCategoryInput) *orm.Category); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, categorymodel.NewCategoryInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: _a0, _a1
func (_m *MockStore) FindById(_a0 context.Context, _a1 int) (*orm.Category, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orm.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*orm.Category, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *orm.Category); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByConditionWithCount provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStore) ListByConditionWithCount(_a0 context.Context, _a1 *categorymodel.Filter, _a2 *common.Paging) ([]*orm.Category, int64, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*orm.Category
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *categorymodel.Filter, *common.Paging) ([]*orm.Category, int64, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *categorymodel.Filter, *common.Paging) []*orm.Category); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*orm.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *categorymodel.Filter, *common.Paging) int64); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *categorymodel.Filter, *common.Paging) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, id, name, description, parentID
func (_m *MockStore) Update(ctx context.Context, id int, name string, description *string, parentID *int) (*orm.Category, error) {
	ret := _m.Called(ctx, id, name, description, parentID)

	var r0 *orm.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *string, *int) (*orm.Category, error)); ok {
		return rf(ctx, id, name, description, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *string, *int) *orm.Category); ok {
		r0 = rf(ctx, id, name, description, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *string, *int) error); ok {
		r1 = rf(ctx, id, name, description, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStore(t mockConstructorTestingTNewMockStore) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
